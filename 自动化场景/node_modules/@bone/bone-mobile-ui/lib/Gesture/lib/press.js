'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPressHandler;

var _constants = require('./constants');

var _constants2 = require('../../util/constants');

function createPressHandler(emitter) {
  var longPressDelayTimeout = void 0;
  var longPressTriggered = false;

  function onTouchStart(el, evt, gestureState) {
    longPressTriggered = false;

    // first of all, trigger onPressIn
    var _el$props$onPressIn = el.props.onPressIn,
        onPressIn = _el$props$onPressIn === undefined ? _constants2.noop : _el$props$onPressIn;

    onPressIn();

    // start long press timeout & add touch listeners
    longPressDelayTimeout = setTimeout(onLongPress, _constants.LONG_PRESS_DELAY_MS, el);
    emitter.on('touchmove', onTouchMove);
    emitter.on('touchend', onTouchEnd);
  }

  function onLongPress(el) {
    var props = el.props;

    if ('onLongPress' in props) {
      // if onLongPress defined, long press will trigger, in such case, long press & press are mutually exclusive
      longPressTriggered = true;
      props.onLongPress();
      return;
    }
    // if onLongPress not defined, press is still valid, do nothing
  }

  function onTouchMove(el, evt, gestureState) {
    // touch moved distance exceed max allowed distance, stop handle touches, trigger press out
    var dx = gestureState.dx,
        dy = gestureState.dy;

    if (Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)) > _constants.PRESS_ALLOWED_MOVEMENT) {
      stopTouchHandle(el);
      return;
    }
  }

  function onTouchEnd(el, evt, gestureState, isValid) {
    stopTouchHandle(el);
    // touch end triggered in natural way
    // and long press still not triggered, press will be triggered
    if (isValid && !longPressTriggered) {
      var _el$props$onPress = el.props.onPress,
          onPress = _el$props$onPress === undefined ? _constants2.noop : _el$props$onPress;

      onPress();
    }
  }

  function stopTouchHandle(el) {
    clearTimeout(longPressDelayTimeout);
    removeEventListeners();
    triggerPressOut(el);
  }

  function removeEventListeners() {
    emitter.removeListener('touchmove', onTouchMove);
    emitter.removeListener('touchend', onTouchEnd);
  }

  function triggerPressOut(el) {
    var _el$props$onPressOut = el.props.onPressOut,
        onPressOut = _el$props$onPressOut === undefined ? _constants2.noop : _el$props$onPressOut;

    onPressOut();
  }

  return { onTouchStart: onTouchStart };
}