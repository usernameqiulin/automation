'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDragHandler;

var _constants = require('./constants');

var _constants2 = require('../../util/constants');

function createDragHandler(emitter) {
  function onTouchStart(el, evt, gestureState) {
    // add touch listeners
    emitter.on('touchmove', onTouchMove);
    emitter.on('touchend', onTouchEnd);
  }

  function onTouchMove(el, evt, gestureState) {
    // once accumulated movement is larger than max allowed distance
    // remove touch listeners & trigger drag start
    var dx = gestureState.dx,
        dy = gestureState.dy;

    if (Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)) > _constants.PRESS_ALLOWED_MOVEMENT) {
      removeTouchListeners();
      onDragStart(el, evt, gestureState);
    }
  }

  function onTouchEnd(el, evt, gestureState) {
    // if touch is end and drag is still not triggered, remove touch listeners
    removeTouchListeners();
  }

  function removeTouchListeners() {
    emitter.removeListener('touchmove', onTouchMove);
    emitter.removeListener('touchend', onTouchEnd);
  }

  function onDragStart(el, evt, gestureState) {
    var _el$props$onDragStart = el.props.onDragStart,
        onDragStart = _el$props$onDragStart === undefined ? _constants2.noop : _el$props$onDragStart;

    onDragStart(calculateDragState(evt, gestureState));

    // add drag listeners
    emitter.on('touchmove', onDrag);
    emitter.on('touchend', onDragEnd);
  }

  function onDrag(el, evt, gestureState) {
    var _el$props$onDrag = el.props.onDrag,
        onDrag = _el$props$onDrag === undefined ? _constants2.noop : _el$props$onDrag;

    onDrag(calculateDragState(evt, gestureState));
  }

  function onDragEnd(el, evt, gestureState) {
    // remove drag listeners
    removeDragListeners();

    var _el$props$onDragEnd = el.props.onDragEnd,
        onDragEnd = _el$props$onDragEnd === undefined ? _constants2.noop : _el$props$onDragEnd;

    onDragEnd(calculateDragState(evt, gestureState));
  }

  function calculateDragState(evt, gestureState) {
    var _evt$nativeEvent = evt.nativeEvent,
        locationX = _evt$nativeEvent.locationX,
        locationY = _evt$nativeEvent.locationY,
        pageX = _evt$nativeEvent.pageX,
        pageY = _evt$nativeEvent.pageY;
    var dx = gestureState.dx,
        dy = gestureState.dy,
        vx = gestureState.vx,
        vy = gestureState.vy;

    return {
      locationX: locationX, locationY: locationY, pageX: pageX, pageY: pageY,
      dx: dx, dy: dy, vx: vx, vy: vy
    };
  }

  function removeDragListeners() {
    emitter.removeListener('touchmove', onDrag);
    emitter.removeListener('touchend', onDragEnd);
  }

  return { onTouchStart: onTouchStart };
}