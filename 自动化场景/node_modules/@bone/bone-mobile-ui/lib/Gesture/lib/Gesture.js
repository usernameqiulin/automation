'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _constants = require('../../util/constants');

var _createEventEmitter = require('../../util/createEventEmitter');

var _createEventEmitter2 = _interopRequireDefault(_createEventEmitter);

var _createPanResponder = require('../../util/createPanResponder');

var _createPanResponder2 = _interopRequireDefault(_createPanResponder);

var _press = require('./press');

var _press2 = _interopRequireDefault(_press);

var _drag = require('./drag');

var _drag2 = _interopRequireDefault(_drag);

var _swipe = require('./swipe');

var _swipe2 = _interopRequireDefault(_swipe);

var _joystick = require('./joystick');

var _joystick2 = _interopRequireDefault(_joystick);

var _zoom = require('./zoom');

var _zoom2 = _interopRequireDefault(_zoom);

var _rotate = require('./rotate');

var _rotate2 = _interopRequireDefault(_rotate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Gesture = function (_Component) {
  (0, _inherits3.default)(Gesture, _Component);

  function Gesture(props) {
    (0, _classCallCheck3.default)(this, Gesture);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Gesture.__proto__ || (0, _getPrototypeOf2.default)(Gesture)).call(this, props));

    _this.onTouchStart = function (evt, gestureState) {
      _this.props.onTouchStart(evt, gestureState);
      _this.emitter.emit('touchstart', _this, evt, gestureState);
    };

    _this.onTouchMove = function (evt, gestureState) {
      _this.props.onTouchMove(evt, gestureState);
      _this.emitter.emit('touchmove', _this, evt, gestureState);
    };

    _this.onTouchEnd = function (evt, gestureState, isValid) {
      _this.props.onTouchEnd(evt, gestureState);
      _this.emitter.emit('touchend', _this, evt, gestureState, isValid);
    };

    _this.panResponder = (0, _createPanResponder2.default)({
      onTouchStart: _this.onTouchStart,
      onTouchMove: _this.onTouchMove,
      onTouchEnd: _this.onTouchEnd
    });
    _this.joystickData = { // data used to calculate joystick angle
      startX: 0, // the top left x position on screen coordinate system
      startY: 0, // the top left y position on screen coordinate system
      width: 0, // width of the Gesture container itself
      height: 0 // height of the Gesture container itself
    };
    _this.zoomData = { // data used to calculate zoom scale
      lastScale: 1 // last scale on zoom end
    };
    _this.rotateData = { // data used to calculate rotate radian & angle
      lastAngle: 0 // last angle on rotate end
    };

    _this.onLayout = function (e) {
      return _reactNative.UIManager.measure(e.target, function (x, y, width, height, pageX, pageY) {
        var joystickData = _this.joystickData;

        joystickData.startX = pageX;
        joystickData.startY = pageY;
        joystickData.width = width;
        joystickData.height = height;
      });
    };

    var emitter = _this.emitter = (0, _createEventEmitter2.default)();

    _this.pressHandler = (0, _press2.default)(emitter);
    _this.dragHandler = (0, _drag2.default)(emitter);
    _this.swipeHandler = (0, _swipe2.default)(emitter);
    _this.joystickHandler = (0, _joystick2.default)(emitter);
    _this.zoomHandler = (0, _zoom2.default)(emitter);
    _this.rotateHandler = (0, _rotate2.default)(emitter);

    _this.setTouchListeners(props);
    return _this;
  }

  (0, _createClass3.default)(Gesture, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setTouchListeners(nextProps);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var emitter = this.emitter;

      // remove listeners
      emitter.removeListener('touchstart', this.pressHandler.onTouchStart);
      emitter.removeListener('touchstart', this.dragHandler.onTouchStart);
      emitter.removeListener('touchstart', this.swipeHandler.onTouchStart);
      emitter.removeListener('touchstart', this.joystickHandler.onTouchStart);
      emitter.removeListener('touchstart', this.zoomHandler.onTouchStart);
      emitter.removeListener('touchstart', this.rotateHandler.onTouchStart);
    }
  }, {
    key: 'setTouchListeners',
    value: function setTouchListeners(props) {
      var emitter = this.emitter;

      // set press listener
      if ('onPressIn' in props || 'onLongPress' in props || 'onPressOut' in props || 'onPress' in props) {
        emitter.on('touchstart', this.pressHandler.onTouchStart);
      } else {
        emitter.removeListener('touchstart', this.pressHandler.onTouchStart);
      }

      // set drag listener
      if ('onDragStart' in props || 'onDrag' in props || 'onDragEnd' in props) {
        emitter.on('touchstart', this.dragHandler.onTouchStart);
      } else {
        emitter.removeListener('touchstart', this.dragHandler.onTouchStart);
      }

      // set swipe listener
      if ('onSwipeStart' in props || 'onSwipe' in props || 'onSwipeEnd' in props) {
        emitter.on('touchstart', this.swipeHandler.onTouchStart);
      } else {
        emitter.removeListener('touchstart', this.swipeHandler.onTouchStart);
      }

      // set joystick listener
      if ('onJoystickStart' in props || 'onJoystick' in props || 'onJoystickEnd' in props) {
        emitter.on('touchstart', this.joystickHandler.onTouchStart);
      } else {
        emitter.removeListener('touchstart', this.joystickHandler.onTouchStart);
      }

      // set zoom listener
      if ('onZoom' in props) {
        emitter.on('touchstart', this.zoomHandler.onTouchStart);
      } else {
        emitter.removeListener('touchstart', this.zoomHandler.onTouchStart);
      }

      // set rotate listener
      if ('onRotate' in props) {
        emitter.on('touchstart', this.rotateHandler.onTouchStart);
      } else {
        emitter.removeListener('touchstart', this.rotateHandler.onTouchStart);
      }
    }

    // isValid, trigger touch end in natural way or not

  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          children = _props.children;

      return _react2.default.createElement(
        _reactNative.View,
        (0, _extends3.default)({
          style: style
        }, this.panResponder.panHandlers, {
          onLayout: this.onLayout
        }),
        children
      );
    }
  }]);
  return Gesture;
}(_react.Component);

Gesture.AnimatedGesture = null;
Gesture.propTypes = {
  // touch, the same as original touch events
  onTouchStart: _propTypes2.default.func,
  onTouchMove: _propTypes2.default.func,
  onTouchEnd: _propTypes2.default.func,

  // press & long press, only effects while barely no movement
  // long press & press are mutually exclusive
  onPressIn: _propTypes2.default.func,
  onLongPress: _propTypes2.default.func,
  onPressOut: _propTypes2.default.func,
  onPress: _propTypes2.default.func,

  // drag start effect after some movement
  onDragStart: _propTypes2.default.func,
  onDrag: _propTypes2.default.func,
  onDragEnd: _propTypes2.default.func,

  // swipe start effect after some movement, and decide the direction on start
  onSwipeStart: _propTypes2.default.func,
  onSwipe: _propTypes2.default.func,
  onSwipeEnd: _propTypes2.default.func,

  // joystick
  onJoystickStart: _propTypes2.default.func,
  onJoystick: _propTypes2.default.func,
  onJoystickEnd: _propTypes2.default.func,

  // zoom, effect on double finger touch
  onZoom: _propTypes2.default.func,

  // rotate, effect on double finger touch
  onRotate: _propTypes2.default.func,

  style: _propTypes2.default.any,
  children: _propTypes2.default.node
};
Gesture.defaultProps = {
  onTouchStart: _constants.noop,
  onTouchMove: _constants.noop,
  onTouchEnd: _constants.noop
};
exports.default = Gesture;