'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createSwipeHandler;

var _constants = require('./constants');

var _constants2 = require('../../util/constants');

function createSwipeHandler(emitter) {
  var direction = void 0;

  function onTouchStart(el, evt, gestureState) {
    // add touch listeners
    emitter.on('touchmove', onTouchMove);
    emitter.on('touchend', onTouchEnd);
  }

  function onTouchMove(el, evt, gestureState) {
    // once accumulated movement is larger than max allowed distance
    // remove touch listeners & trigger swipe start
    var dx = gestureState.dx,
        dy = gestureState.dy;

    if (Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)) > _constants.PRESS_ALLOWED_MOVEMENT) {
      removeTouchListeners();
      onSwipeStart(el, evt, gestureState);
    }
  }

  function onTouchEnd(el, evt, gestureState) {
    // touch end and swipe not triggered, remove touch listeners
    removeTouchListeners();
  }

  function removeTouchListeners() {
    emitter.removeListener('touchmove', onTouchMove);
    emitter.removeListener('touchend', onTouchEnd);
  }

  function onSwipeStart(el, evt, gestureState) {
    var dx = gestureState.dx,
        dy = gestureState.dy;

    dx = Math.abs(dx);
    dy = Math.abs(dy);

    // decide the direction on start
    if (dx > dy) {
      direction = 'horizontal';
    } else {
      direction = 'vertical';
    }

    // trigger swipe start
    var _el$props$onSwipeStar = el.props.onSwipeStart,
        onSwipeStart = _el$props$onSwipeStar === undefined ? _constants2.noop : _el$props$onSwipeStar;

    onSwipeStart(calculateSwipeState(evt, gestureState));

    // add swipe listeners
    emitter.on('touchmove', onSwipe);
    emitter.on('touchend', onSwipeEnd);
  }

  function onSwipe(el, evt, gestureState) {
    var _el$props$onSwipe = el.props.onSwipe,
        onSwipe = _el$props$onSwipe === undefined ? _constants2.noop : _el$props$onSwipe;

    onSwipe(calculateSwipeState(evt, gestureState));
  }

  function onSwipeEnd(el, evt, gestureState) {
    // remove swipe listeners
    removeSwipeListeners();

    var _el$props$onSwipeEnd = el.props.onSwipeEnd,
        onSwipeEnd = _el$props$onSwipeEnd === undefined ? _constants2.noop : _el$props$onSwipeEnd;

    onSwipeEnd(calculateSwipeState(evt, gestureState));
  }

  function calculateSwipeState(evt, gestureState) {
    var _evt$nativeEvent = evt.nativeEvent,
        locationX = _evt$nativeEvent.locationX,
        locationY = _evt$nativeEvent.locationY,
        pageX = _evt$nativeEvent.pageX,
        pageY = _evt$nativeEvent.pageY;

    var d = void 0,
        v = void 0;

    if (direction === 'horizontal') {
      d = gestureState.dx;
      v = gestureState.vx;
    } else {
      d = gestureState.dy;
      v = gestureState.vy;
    }

    return {
      locationX: locationX, locationY: locationY, pageX: pageX, pageY: pageY,
      direction: direction, d: d, v: v
    };
  }

  function removeSwipeListeners() {
    emitter.removeListener('touchmove', onSwipe);
    emitter.removeListener('touchend', onSwipeEnd);
  }

  return { onTouchStart: onTouchStart };
}