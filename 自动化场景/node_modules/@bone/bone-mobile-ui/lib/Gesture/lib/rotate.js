'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createRotateHandler;

var _constants = require('../../util/constants');

function createRotateHandler(emitter) {
  var startAngle = void 0;
  var angle = void 0;

  function onTouchStart(el, evt, gestureState) {
    if (gestureState.numberActiveTouches === 2) {
      // detect double finger touch on touch start, start rotate
      onRotateStart(el, evt, gestureState);
    } else {
      // else, add touch listeners & keep detecting double finger touch
      addTouchListeners();
    }
  }

  function onTouchMove(el, evt, gestureState) {
    // if it's double finger touch, remove touch listeners & start rotate
    if (gestureState.numberActiveTouches === 2) {
      removeTouchListeners();
      onRotateStart(el, evt, gestureState);
    }
  }

  function onTouchEnd(el, evt, gestureState) {
    // touch end, rotate not triggered
    removeTouchListeners();
  }

  function addTouchListeners() {
    emitter.on('touchmove', onTouchMove);
    emitter.on('touchend', onTouchEnd);
  }

  function removeTouchListeners() {
    emitter.removeListener('touchmove', onTouchMove);
    emitter.removeListener('touchend', onTouchEnd);
  }

  function onRotateStart(el, evt, gestureState) {
    // calculate start angle & record last angle
    startAngle = calculateAngle(evt);
    angle = el.rotateData.lastAngle;

    // add rotate listeners
    addRotateListeners();
  }

  function onRotate(el, evt, gestureState) {
    if (gestureState.numberActiveTouches === 2) {
      // it's double finger touch, trigger rotate
      var _el$props$onRotate = el.props.onRotate,
          _onRotate = _el$props$onRotate === undefined ? _constants.noop : _el$props$onRotate;

      angle = standardizeAngle(startAngle - calculateAngle(evt) + el.rotateData.lastAngle);
      _onRotate({
        angle: angle,
        radian: Math.PI * angle / 180
      });
    } else {
      // still touch, but not double finger, in such case, rotate ended
      // remove rotate listeners & record angle as last angle
      removeRotateListeners();
      el.rotateData.lastAngle = angle;

      // add touch listeners & keep detecting double finger touch
      addTouchListeners();
    }
  }

  function onRotateEnd(el, evt, gestureState) {
    // remove rotate listeners
    removeRotateListeners();

    // if it's double finger touch on end, also trigger rotate
    if (gestureState.numberActiveTouches === 2) {
      var _el$props$onRotate2 = el.props.onRotate,
          _onRotate2 = _el$props$onRotate2 === undefined ? _constants.noop : _el$props$onRotate2;

      angle = standardizeAngle(startAngle - calculateAngle(evt) + el.rotateData.lastAngle);
      _onRotate2({
        angle: angle,
        radian: Math.PI * angle / 180
      });
    }

    // record angle as last angle
    el.rotateData.lastAngle = angle;
  }

  function addRotateListeners() {
    emitter.on('touchmove', onRotate);
    emitter.on('touchend', onRotateEnd);
  }

  function removeRotateListeners() {
    emitter.removeListener('touchmove', onRotate);
    emitter.removeListener('touchend', onRotateEnd);
  }

  function calculateAngle(evt) {
    var touches = evt.nativeEvent.touches;

    return Math.atan2(touches[0].pageX - touches[1].pageX, touches[0].pageY - touches[1].pageY) / Math.PI * 180;
  }

  function standardizeAngle(angle) {
    if (angle > 360) {
      return angle % 360;
    } else if (angle < 0) {
      return angle % 360 + 360;
    } else {
      return angle;
    }
  }

  return { onTouchStart: onTouchStart };
}