'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createZoomHandler;

var _constants = require('../../util/constants');

function createZoomHandler(emitter) {
  var startDistance = void 0;
  var scale = void 0;

  function onTouchStart(el, evt, gestureState) {
    if (gestureState.numberActiveTouches === 2) {
      // if it's double finger touch, start zoom
      onZoomStart(el, evt, gestureState);
    } else {
      // else, add touch listeners & keep detecting double finger touch
      addTouchListeners();
    }
  }

  function onTouchMove(el, evt, gestureState) {
    // if it's double finger touch, remove touch listeners & start zoom
    if (gestureState.numberActiveTouches === 2) {
      removeTouchListeners();
      onZoomStart(el, evt, gestureState);
    }
  }

  function onTouchEnd(el, evt, gestureState) {
    // touch is end, zoom not triggered
    removeTouchListeners();
  }

  function addTouchListeners() {
    emitter.on('touchmove', onTouchMove);
    emitter.on('touchend', onTouchEnd);
  }

  function removeTouchListeners() {
    emitter.removeListener('touchmove', onTouchMove);
    emitter.removeListener('touchend', onTouchEnd);
  }

  function onZoomStart(el, evt, gestureState) {
    // calculate start distance & record initial scale
    // zoom just start, not triggered
    startDistance = calculateDistance(evt);
    scale = el.zoomData.lastScale;

    // add zoom listeners, keep detecting zoom effective
    addZoomListeners();
  }

  function onZoom(el, evt, gestureState) {
    if (gestureState.numberActiveTouches === 2) {
      // while doulbe finger touch, trigger zoom
      var _el$props$onZoom = el.props.onZoom,
          _onZoom = _el$props$onZoom === undefined ? _constants.noop : _el$props$onZoom;

      scale = calculateDistance(evt) / startDistance * el.zoomData.lastScale;
      _onZoom({ scale: scale });
    } else {
      // still touch, but not double finger, in such case, zoom ended
      // remove zoom listeners & record scale as last scale
      removeZoomListeners();
      el.zoomData.lastScale = scale;

      // add touch listeners & keep detecting double finger touch
      addTouchListeners();
    }
  }

  function onZoomEnd(el, evt, gestureState) {
    // remove zoom listeners
    removeZoomListeners();

    // if also double finger touch on end, trigger zoom
    if (gestureState.numberActiveTouches === 2) {
      var _el$props$onZoom2 = el.props.onZoom,
          _onZoom2 = _el$props$onZoom2 === undefined ? _constants.noop : _el$props$onZoom2;

      scale = calculateDistance(evt) / startDistance * el.zoomData.lastScale;
      _onZoom2({ scale: scale });
    }

    // record scale as last scale
    el.zoomData.lastScale = scale;
  }

  function addZoomListeners() {
    emitter.on('touchmove', onZoom);
    emitter.on('touchend', onZoomEnd);
  }

  function removeZoomListeners() {
    emitter.removeListener('touchmove', onZoom);
    emitter.removeListener('touchend', onZoomEnd);
  }

  function calculateDistance(evt) {
    var touches = evt.nativeEvent.touches;

    var dx = touches[0].pageX - touches[1].pageX;
    var dy = touches[0].pageY - touches[1].pageY;
    return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
  }

  return { onTouchStart: onTouchStart };
}