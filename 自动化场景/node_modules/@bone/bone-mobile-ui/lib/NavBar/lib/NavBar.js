'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TouchableOpacity = require('../../TouchableOpacity');

var _TouchableOpacity2 = _interopRequireDefault(_TouchableOpacity);

var _themes = require('../../style/themes');

var _themes2 = _interopRequireDefault(_themes);

var _constants = require('../../util/constants');

var _constants2 = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    width = _Dimensions$get.width,
    height = _Dimensions$get.height;

var iPhoneX = _reactNative.Platform.OS === 'ios' && (height === 812 || width === 812);

var NavBar = function (_Component) {
  (0, _inherits3.default)(NavBar, _Component);

  function NavBar() {
    (0, _classCallCheck3.default)(this, NavBar);
    return (0, _possibleConstructorReturn3.default)(this, (NavBar.__proto__ || (0, _getPrototypeOf2.default)(NavBar)).apply(this, arguments));
  }

  (0, _createClass3.default)(NavBar, [{
    key: 'renderTitle',
    value: function renderTitle() {
      var _props = this.props,
          title = _props.title,
          titleStyle = _props.titleStyle;

      if (_react2.default.isValidElement(title)) {
        return title;
      } else if (typeof title === 'string') {
        var titleValue = title;
        if (titleValue.length > _constants2.TITLE_MAX_LENGTH) {
          titleValue = titleValue.substr(0, _constants2.TITLE_MAX_LENGTH) + '...';
        }
        return _react2.default.createElement(
          _reactNative.Text,
          { style: [styles.title, titleStyle] },
          titleValue
        );
      } else {
        return null;
      }
    }
  }, {
    key: 'renderLeft',
    value: function renderLeft() {
      var _props2 = this.props,
          left = _props2.left,
          leftStyle = _props2.leftStyle;

      if (_react2.default.isValidElement(left)) {
        return left;
      } else if (typeof left === 'string') {
        return _react2.default.createElement(
          _reactNative.Text,
          { style: [styles.left, leftStyle] },
          left
        );
      } else {
        var backgroundColor = '#7a7a7a';
        if (leftStyle !== undefined && 'color' in leftStyle) {
          backgroundColor = leftStyle.color;
        }
        return _react2.default.createElement(
          _reactNative.View,
          { style: styles.leftArrow },
          _react2.default.createElement(_reactNative.View, { style: [styles.arrowTop, { backgroundColor: backgroundColor }] }),
          _react2.default.createElement(_reactNative.View, { style: [styles.arrowLeft, { backgroundColor: backgroundColor }] })
        );
      }
    }
  }, {
    key: 'renderRight',
    value: function renderRight() {
      var _this2 = this;

      var onRightPress = this.props.onRightPress;
      var right = this.props.right;

      if (!Array.isArray(right) && !_react2.default.isValidElement(right) && typeof right !== 'string') {
        return null;
      }

      right = Array.isArray(right) ? right : [right];
      return right.map(function (item, index) {
        return _react2.default.createElement(
          _TouchableOpacity2.default,
          { key: index, style: styles.rightItemContainer, activeOpacity: 0.6, onPress: function onPress() {
              return onRightPress(index);
            } },
          _react2.default.isValidElement(item) ? item : _react2.default.createElement(
            _reactNative.Text,
            { style: [styles.right, _this2.getRightButtonStyle(index)] },
            item
          )
        );
      });
    }
  }, {
    key: 'getRightButtonStyle',
    value: function getRightButtonStyle(index) {
      var rightStyle = this.props.rightStyle;
      // undefined or null is okay

      if (Array.isArray(rightStyle)) {
        return rightStyle[index];
      } else {
        return index === 0 ? rightStyle : null;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          style = _props3.style,
          onLeftPress = _props3.onLeftPress;

      return _react2.default.createElement(
        _reactNative.Animated.View,
        { style: [styles.body, style] },
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.container },
          _react2.default.createElement(
            _reactNative.View,
            { style: styles.titleContainer },
            this.renderTitle()
          ),
          _react2.default.createElement(
            _reactNative.View,
            { style: styles.contentContainer },
            _react2.default.createElement(
              _TouchableOpacity2.default,
              { style: styles.leftContainer, activeOpacity: 0.6, onPress: onLeftPress },
              this.renderLeft()
            ),
            _react2.default.createElement(
              _reactNative.View,
              { style: styles.rightContainer },
              this.renderRight()
            )
          )
        )
      );
    }
  }]);
  return NavBar;
}(_react.Component);

NavBar.propTypes = {
  style: _propTypes2.default.any,
  title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
  titleStyle: _reactNative.Text.propTypes.style,
  left: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
  leftStyle: _reactNative.Text.propTypes.style,
  right: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]))]),
  rightStyle: _propTypes2.default.oneOfType([_reactNative.Text.propTypes.style, _propTypes2.default.arrayOf(_reactNative.Text.propTypes.style)]),
  onLeftPress: _propTypes2.default.func,
  onRightPress: _propTypes2.default.func
};
NavBar.defaultProps = {
  onLeftPress: _constants.noop,
  onRightPress: _constants.noop
};
exports.default = NavBar;


var styles = _reactNative.StyleSheet.create({
  body: {
    height: _reactNative.Platform.OS === 'ios' ? iPhoneX ? 84 : 64 : 44,
    paddingTop: _reactNative.Platform.OS === 'ios' ? iPhoneX ? 40 : 20 : 0,
    backgroundColor: _themes2.default['color.fill.general']
  },
  container: {
    position: 'relative',
    flex: 1
  },
  titleContainer: {
    flex: 1,
    paddingRight: 16,
    paddingLeft: 16,
    justifyContent: 'center'
  },
  title: {
    fontSize: 17,
    fontWeight: _themes2.default['font.weight.bold'],
    color: '#000',
    textAlign: 'center'
  },
  contentContainer: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  leftContainer: {
    paddingRight: 16,
    paddingLeft: 16,
    justifyContent: 'center'
  },
  left: {
    fontSize: 17,
    color: '#1fc88b'
  },
  leftArrow: {
    position: 'relative',
    width: 10,
    height: 20
  },
  arrowTop: {
    position: 'absolute',
    top: (20 - 2.5) / 2 - 13 / 2 * Math.sin(49 / 180 * Math.PI) + 1,
    left: -13 / 2 * Math.cos(49 / 180 * Math.PI),
    width: 13,
    height: 2.5,
    borderTopRightRadius: 1.25,
    borderBottomRightRadius: 1.25,
    borderTopLeftRadius: 2.5,
    transform: [{ rotate: '-49deg' }]
  },
  arrowLeft: {
    position: 'absolute',
    top: (20 - 2.5) / 2 + 13 / 2 * Math.sin(49 / 180 * Math.PI) - 1,
    left: -13 / 2 * Math.cos(49 / 180 * Math.PI),
    width: 13,
    height: 2.5,
    borderTopRightRadius: 1.25,
    borderBottomRightRadius: 1.25,
    borderBottomLeftRadius: 2.5,
    transform: [{ rotate: '49deg' }]
  },
  rightContainer: {
    paddingRight: 8,
    flexDirection: 'row'
  },
  rightItemContainer: {
    paddingRight: 8,
    paddingLeft: 8,
    justifyContent: 'center'
  },
  right: {
    fontSize: 17,
    color: '#1fc88b'
  }
});