'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _ActionSheet = require('../../ActionSheet');

var _ActionSheet2 = _interopRequireDefault(_ActionSheet);

var _Gesture = require('../../Gesture');

var _Gesture2 = _interopRequireDefault(_Gesture);

var _TouchableOverlay = require('../../TouchableOverlay');

var _TouchableOverlay2 = _interopRequireDefault(_TouchableOverlay);

var _themes = require('../../style/themes');

var _themes2 = _interopRequireDefault(_themes);

var _constants = require('./constants');

var _constants2 = require('../../util/constants');

var _helpers = require('../../util/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListItem = function (_Component) {
  (0, _inherits3.default)(ListItem, _Component);

  function ListItem(props) {
    (0, _classCallCheck3.default)(this, ListItem);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ListItem.__proto__ || (0, _getPrototypeOf2.default)(ListItem)).call(this, props));

    _this.state = {
      pressing: false,
      swipeDX: new _reactNative.Animated.Value(0) // iOS & Web only
    };
    _this.maxSwipeDXValue = 0;
    _this.swipeDXValue = 0;
    _this.startSwipeDXValue = 0;

    _this.onPressIn = function () {
      if ('onPress' in _this.props) {
        _this.setState({ pressing: true });
      }
      // close siblings' swipe
      _this.closeSiblingsSwipe();
    };

    _this.onPressOut = function () {
      if ('onPress' in _this.props) {
        _this.setState({ pressing: false });
      }
    };

    _this.onPress = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          _this$props$onPress = _this$props.onPress,
          onPress = _this$props$onPress === undefined ? _constants2.noop : _this$props$onPress,
          onDisabledPress = _this$props.onDisabledPress,
          swipeStore = _this$props.swipeStore;

      if (disabled) {
        onDisabledPress();
        return;
      }

      if (swipeStore.indexOf(_this) !== -1) {
        _this.closeSwipe();
      }

      onPress();
    };

    _this.onSwipeStart = function (state) {
      if (!_this.isSwipeAvailable(state)) {
        return;
      }
      _this.stopSwipeAnimation();
      _this.startSwipeDXValue = _this.swipeDXValue;
      _this.handleSwipe(state);
    };

    _this.onSwipe = function (state) {
      if (!_this.isSwipeAvailable(state)) {
        return;
      }
      _this.handleSwipe(state);
    };

    _this.onSwipeEnd = function (state) {
      if (!_this.isSwipeAvailable(state)) {
        return;
      }
      _this.handleSwipe(state);

      // open swipe or close swipe, determined on the velocity & move distance
      var v = state.v;

      if (Math.abs(v) > _constants.SWIPE_EFFECTIVE_MINIMUM_VELOCITY) {
        // priority 1 is velocity
        if (v < 0) {
          _this.openSwipe();
        } else if (v > 0) {
          _this.closeSwipe();
        }
      } else {
        // priority 2 is move distance  
        if (_this.swipeDXValue < _this.maxSwipeDXValue / 2) {
          _this.openSwipe();
        } else {
          _this.closeSwipe();
        }
      }
    };

    _this.onSwipeAnimationStopped = function (value) {
      // keep swipeDXValue fresh
      _this.swipeDXValue = value;
    };

    _this.onLongPress = function () {
      var _this$props2 = _this.props,
          actions = _this$props2.actions,
          actionTitle = _this$props2.actionTitle,
          actionCancelText = _this$props2.actionCancelText,
          disabled = _this$props2.disabled;

      if (disabled || !actions.length) {
        return;
      }

      _this.actionSheet = _ActionSheet2.default.open({
        title: actionTitle,
        options: actions.map(function (action) {
          return { text: action.text };
        }),
        cancelText: actionCancelText,
        onPress: function onPress(index) {
          var _actions$index$onPres = actions[index].onPress,
              onPress = _actions$index$onPres === undefined ? _constants2.noop : _actions$index$onPres;

          onPress();
        }
      });
    };

    _this.onActionsLayout = function (e) {
      return _reactNative.UIManager.measure(e.target, function (x, y, width) {
        _this.maxSwipeDXValue = -width;
      });
    };

    _this.checkProps(props);
    return _this;
  }

  (0, _createClass3.default)(ListItem, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.checkProps(nextProps);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.actionSheet && this.actionSheet.close();
    }
  }, {
    key: 'checkProps',
    value: function checkProps(props) {
      (0, _invariant2.default)('swipeStore' in props, 'List.Item must be nested in List');
    }

    // iOS & Web only
    // the value of state.swipeDX


    // iOS & Web only

  }, {
    key: 'isSwipeAvailable',
    value: function isSwipeAvailable(state) {
      var direction = state.direction;

      if (direction !== 'horizontal') {
        return false;
      }

      var _props = this.props,
          actions = _props.actions,
          disabled = _props.disabled;

      if (disabled || !actions.length) {
        return false;
      }

      return true;
    }
  }, {
    key: 'handleSwipe',
    value: function handleSwipe(state) {
      var d = state.d;
      var swipeDX = this.state.swipeDX;


      var swipeDXValue = this.startSwipeDXValue + d;
      if (swipeDXValue > 0) {
        swipeDXValue = 0;
      } else if (swipeDXValue < this.maxSwipeDXValue) {
        swipeDXValue = this.maxSwipeDXValue;
      }

      this.swipeDXValue = swipeDXValue;
      swipeDX.setValue(swipeDXValue);
    }
  }, {
    key: 'openSwipe',
    value: function openSwipe() {
      // opened, cache in swipe store
      (0, _helpers.addToArray)(this.props.swipeStore, this);

      this.stopSwipeAnimation();
      _reactNative.Animated.timing(this.state.swipeDX, {
        duration: _constants.SWIPE_ANIMATION_DURATION,
        toValue: this.maxSwipeDXValue,
        easing: _reactNative.Easing.in
      }).start();
    }
  }, {
    key: 'closeSwipe',
    value: function closeSwipe() {
      // closed, remove from swipe store
      (0, _helpers.removeFromArray)(this.props.swipeStore, this);

      this.stopSwipeAnimation();
      _reactNative.Animated.timing(this.state.swipeDX, {
        duration: _constants.SWIPE_ANIMATION_DURATION,
        toValue: 0,
        easing: _reactNative.Easing.in
      }).start();
    }

    // close sibling elements' swipe while touching

  }, {
    key: 'closeSiblingsSwipe',
    value: function closeSiblingsSwipe() {
      var _this2 = this;

      this.props.swipeStore.filter(function (el) {
        return el !== _this2;
      }) // make a new array, won't be effected by swipe store's decrease
      .forEach(function (el) {
        return el.closeSwipe();
      }); // close siblings' swipe
    }
  }, {
    key: 'stopSwipeAnimation',
    value: function stopSwipeAnimation() {
      var swipeDX = this.state.swipeDX;

      swipeDX.stopAnimation(this.onSwipeAnimationStopped);
    }

    // Android only

  }, {
    key: 'getSwipeStyle',
    value: function getSwipeStyle() {
      // swipe only on iOS & Web
      if (_reactNative.Platform.OS === 'android') {
        return null;
      }

      var _props2 = this.props,
          actions = _props2.actions,
          disabled = _props2.disabled;
      var swipeDX = this.state.swipeDX;

      return disabled || !actions.length ? null : { transform: [{ translateX: swipeDX }] };
    }
  }, {
    key: 'getGestureProps',
    value: function getGestureProps() {
      var props = {
        onPressIn: this.onPressIn,
        onPressOut: this.onPressOut,
        onPress: this.onPress
      };
      var actions = this.props.actions;


      if (actions.length) {
        // if we do have actions
        if (_reactNative.Platform.OS === 'android') {
          // long press on Android
          props.onLongPress = this.onLongPress;
        } else {
          // swipe on iOS & Web
          props.onSwipeStart = this.onSwipeStart;
          props.onSwipe = this.onSwipe;
          props.onSwipeEnd = this.onSwipeEnd;
        }
      }

      return props;
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var _props3 = this.props,
          image = _props3.image,
          imageStyle = _props3.imageStyle,
          title = _props3.title,
          titleStyle = _props3.titleStyle,
          subtitle = _props3.subtitle,
          subtitleStyle = _props3.subtitleStyle,
          titleContainerStyle = _props3.titleContainerStyle;

      var source = typeof image === 'string' ? { uri: image } : image;
      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.contentContainer, { alignItems: this.translateAlignStyleValue() }] },
        image === undefined ? null : _react2.default.createElement(_reactNative.Image, { style: [styles.image, imageStyle], source: source }),
        _react2.default.createElement(
          _reactNative.View,
          { style: [styles.titleContainer, titleContainerStyle] },
          title === undefined ? null : _react2.default.createElement(
            _reactNative.Text,
            { style: [styles.title, titleStyle] },
            title
          ),
          subtitle === undefined ? null : _react2.default.createElement(
            _reactNative.Text,
            { style: [styles.subtitle, subtitleStyle] },
            subtitle
          )
        ),
        this.renderExtra()
      );
    }
  }, {
    key: 'translateAlignStyleValue',
    value: function translateAlignStyleValue() {
      var align = this.props.align;

      switch (align) {
        case 'top':
          return 'flex-start';
        case 'middle':
          return 'center';
        case 'bottom':
          return 'flex-end';
        default:
          return 'center';
      }
    }
  }, {
    key: 'renderExtra',
    value: function renderExtra() {
      var _props4 = this.props,
          extra = _props4.extra,
          extraStyle = _props4.extraStyle;

      if (extra === undefined) {
        return null;
      } else if (_react2.default.isValidElement(extra)) {
        return _react2.default.createElement(
          _reactNative.View,
          { style: [styles.extraContainer, extraStyle] },
          extra
        );
      } else {
        return _react2.default.createElement(
          _reactNative.Text,
          { style: [styles.extra, extraStyle] },
          extra
        );
      }
    }
  }, {
    key: 'renderArrow',
    value: function renderArrow() {
      if ('arrow' in this.props) {
        return _react2.default.createElement(_reactNative.View, {
          style: [styles.arrow, {
            transform: [{ rotate: this.translateArrowRotateDeg() + 'deg' }]
          }]
        });
      }
      return null;
    }
  }, {
    key: 'translateArrowRotateDeg',
    value: function translateArrowRotateDeg() {
      var arrow = this.props.arrow;

      switch (arrow) {
        case 'up':
          return 315;
        case 'right':
          return 45;
        case 'down':
          return 135;
        default:
          return 45;
      }
    }
  }, {
    key: 'renderBorder',
    value: function renderBorder() {
      var noBorder = this.props.noBorder;

      if (noBorder) {
        return null;
      } else {
        return _react2.default.createElement(_reactNative.View, { style: styles.border });
      }
    }
  }, {
    key: 'renderOverlay',
    value: function renderOverlay() {
      var disabled = this.props.disabled;
      var pressing = this.state.pressing;

      if (disabled) {
        return _react2.default.createElement(_reactNative.View, { style: [styles.overlay, { backgroundColor: _themes2.default['color.overlay.disable'] }] });
      } else if (pressing) {
        return _react2.default.createElement(_reactNative.View, { style: [styles.overlay, { backgroundColor: _themes2.default['color.overlay.active'] }] });
      } else {
        return null;
      }
    }
  }, {
    key: 'renderSwipeActions',
    value: function renderSwipeActions() {
      var _this3 = this;

      if (_reactNative.Platform.OS === 'android') {
        return null;
      }

      var actions = this.props.actions;

      if (!actions.length) {
        return null;
      }

      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.actionsContainer },
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.actions, onLayout: this.onActionsLayout },
          actions.map(function (action, index) {
            var text = action.text,
                _action$style = action.style,
                style = _action$style === undefined ? {} : _action$style,
                _onPress = action.onPress;
            var _style$backgroundColo = style.backgroundColor,
                backgroundColor = _style$backgroundColo === undefined ? '#ff3838' : _style$backgroundColo,
                _style$color = style.color,
                color = _style$color === undefined ? '#fff' : _style$color;

            return _react2.default.createElement(
              _TouchableOverlay2.default,
              {
                key: index,
                style: [styles.action, { backgroundColor: backgroundColor }],
                onPress: function onPress() {
                  return _this3.handleActionPress(_onPress);
                }
              },
              _react2.default.createElement(
                _reactNative.Text,
                { style: [styles.actionText, { color: color }] },
                text
              )
            );
          })
        )
      );
    }
  }, {
    key: 'handleActionPress',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var onPress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constants2.noop;
        var disabled;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                disabled = this.props.disabled;

                if (!disabled) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt('return');

              case 3:
                try {
                  onPress();
                  this.closeSwipe();
                } catch (err) {
                  // Promise reject, do nothing
                }

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function handleActionPress() {
        return _ref.apply(this, arguments);
      }

      return handleActionPress;
    }()
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.body },
        _react2.default.createElement(
          _Gesture2.default.AnimatedGesture,
          (0, _extends3.default)({
            style: [styles.item, this.getSwipeStyle()]
          }, this.getGestureProps()),
          this.renderContent(),
          this.renderArrow(),
          this.renderBorder(),
          this.renderOverlay()
        ),
        this.renderSwipeActions()
      );
    }
  }]);
  return ListItem;
}(_react.Component);

ListItem.propTypes = {
  // content
  image: _propTypes2.default.any,
  imageStyle: _reactNative.Image.propTypes.style,
  title: _propTypes2.default.string,
  titleStyle: _reactNative.Text.propTypes.style,
  subtitle: _propTypes2.default.string,
  subtitleStyle: _reactNative.Text.propTypes.style,
  titleContainerStyle: _reactNative.View.propTypes.style,
  extra: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
  extraStyle: _propTypes2.default.oneOfType([_reactNative.Text.propTypes.style, _reactNative.View.propTypes.style]),
  arrow: _propTypes2.default.oneOf(['up', 'right', 'down']),
  align: _propTypes2.default.oneOf(['top', 'middle', 'bottom']),

  // actions: swipe on iOS & Web, long press on Android
  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    text: _propTypes2.default.string.isRequired,
    style: _propTypes2.default.shape({ // iOS & Web only
      color: _propTypes2.default.string,
      backgroundColor: _propTypes2.default.string
    }),
    onPress: _propTypes2.default.func
  })),
  actionTitle: _propTypes2.default.string, // Android only
  actionCancelText: _propTypes2.default.string, // Android only

  // interaction
  disabled: _propTypes2.default.bool,
  onPress: _propTypes2.default.func,
  onDisabledPress: _propTypes2.default.func,

  // will not tell users, used by List component
  noBorder: _propTypes2.default.bool,
  swipeStore: _propTypes2.default.array // store to cache swipe opened list item
};
ListItem.defaultProps = {
  align: 'middle',
  actions: [],
  disabled: false,
  onDisabledPress: _constants2.noop
};
exports.default = ListItem;


var styles = _reactNative.StyleSheet.create({
  body: {
    position: 'relative',
    backgroundColor: _themes2.default['color.fill.general'],
    overflow: 'hidden'
  },
  item: {
    position: 'relative',
    paddingRight: 16,
    paddingLeft: 24,
    backgroundColor: _themes2.default['color.fill.general'],
    zIndex: 1,
    flexDirection: 'row',
    alignItems: 'center'
  },
  contentContainer: {
    flex: 1,
    minHeight: 64,
    flexDirection: 'row'
  },
  image: {
    width: 36,
    height: 36,
    marginTop: 14,
    marginRight: 24,
    marginBottom: 14
  },
  titleContainer: {
    flex: 1,
    paddingTop: 20,
    paddingRight: 10,
    paddingBottom: 20,
    alignItems: 'flex-start'
  },
  title: {
    lineHeight: 20,
    fontSize: 14,
    fontWeight: _themes2.default['font.weight.bold'],
    color: _themes2.default['color.text.title']
  },
  subtitle: {
    marginTop: 6,
    lineHeight: 18,
    fontSize: 12,
    color: _themes2.default['color.text.subtitle']
  },
  extraContainer: {
    marginTop: 16,
    marginBottom: 16
  },
  extra: {
    maxWidth: 120,
    marginTop: 20,
    marginBottom: 20,
    lineHeight: 18,
    fontSize: 12,
    color: _themes2.default['color.text.subtitle'],
    transform: [{ translateY: _reactNative.Platform.OS === 'android' ? -1.5 : 0 }]
  },
  arrow: {
    width: 6,
    height: 6,
    marginLeft: 6,
    borderTopWidth: 1,
    borderRightWidth: 1,
    borderColor: _themes2.default['color.border.arrow']
  },
  border: {
    position: 'absolute',
    right: 0,
    bottom: 0,
    left: 24,
    height: 1,
    backgroundColor: _themes2.default['color.border.general']
  },
  overlay: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },
  actionsContainer: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    flexDirection: 'row',
    justifyContent: 'flex-end'
  },
  actions: {
    flexDirection: 'row'
  },
  action: {
    paddingRight: 27,
    paddingLeft: 27,
    justifyContent: 'center'
  },
  actionText: {
    fontSize: 14
  }
});