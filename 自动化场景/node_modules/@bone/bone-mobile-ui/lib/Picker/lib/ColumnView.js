'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _constants = require('./constants');

var _constants2 = require('../../util/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ColumnView = function (_Component) {
  (0, _inherits3.default)(ColumnView, _Component);

  function ColumnView() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, ColumnView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ColumnView.__proto__ || (0, _getPrototypeOf2.default)(ColumnView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      translateY: new _reactNative.Animated.Value(0)
    }, _this.lastStartIndex = 0, _this.scrollTop = 0, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(ColumnView, [{
    key: 'scrollTo',
    value: function scrollTo(scrollTop) {
      var lineHeight = this.props.lineHeight;
      var translateY = this.state.translateY;

      this.scrollTop = scrollTop;
      translateY.setValue(-scrollTop);

      var startIndex = Math.floor(scrollTop / lineHeight);
      if (startIndex !== this.lastStartIndex) {
        this.lastStartIndex = startIndex;
        this.forceUpdate();
      }
    }

    // only render visible rows

  }, {
    key: 'renderVisibleRows',
    value: function renderVisibleRows() {
      var scrollTop = this.scrollTop;
      var _props = this.props,
          lineHeight = _props.lineHeight,
          data = _props.data,
          renderRow = _props.renderRow;

      var startIndex = Math.floor(scrollTop / lineHeight);
      var endIndex = startIndex + _constants.BODY_HEIGHT_COEFFICIENT;
      var rowEls = [];
      for (var index = startIndex; index <= endIndex; ++index) {
        if (data[index] !== undefined) {
          rowEls.push(_react2.default.createElement(
            _reactNative.View,
            { key: index, style: [styles.row, { height: lineHeight, transform: [{ translateY: lineHeight * index }] }] },
            renderRow(data[index], index)
          ));
        }
      }
      return rowEls;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          style = _props2.style,
          lineHeight = _props2.lineHeight,
          data = _props2.data;
      var translateY = this.state.translateY;

      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.body, style] },
        _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: [styles.scrollBody, {
              height: lineHeight * data.length,
              transform: [{ translateY: translateY }]
            }]
          },
          this.renderVisibleRows()
        )
      );
    }
  }]);
  return ColumnView;
}(_react.Component);

ColumnView.propTypes = {
  style: _reactNative.View.propTypes.style,
  lineHeight: _propTypes2.default.number,
  data: _propTypes2.default.arrayOf(_propTypes2.default.any),
  renderRow: _propTypes2.default.func
};
ColumnView.defaultProps = {
  lineHeight: _constants.ITEM_LINE_HEIGHT,
  data: [],
  renderRow: _constants2.noop
};
exports.default = ColumnView;


var styles = _reactNative.StyleSheet.create({
  body: {
    position: 'relative',
    overflow: 'hidden'
  },
  scrollBody: {
    position: 'absolute',
    top: 0,
    right: 0,
    left: 0
  },
  row: {
    position: 'absolute',
    top: 0,
    right: 0,
    left: 0
  }
});