'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Gesture = require('../../Gesture');

var _Gesture2 = _interopRequireDefault(_Gesture);

var _ColumnView = require('./ColumnView');

var _ColumnView2 = _interopRequireDefault(_ColumnView);

var _Gradient = require('./Gradient');

var _Gradient2 = _interopRequireDefault(_Gradient);

var _themes = require('../../style/themes');

var _themes2 = _interopRequireDefault(_themes);

var _constants = require('../../util/constants');

var _constants2 = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dataChanged = function dataChanged(prevData, nextData) {
  if (prevData.length !== nextData.length) {
    return true;
  }
  return nextData.some(function (nextColumnData, index) {
    var prevColumnData = prevData[index];
    if (prevColumnData.length !== nextColumnData.length) {
      return true;
    }
    return nextColumnData.some(function (nextItem, index) {
      var prevItem = prevColumnData[index];
      return prevItem.value !== nextItem.value || prevItem.label !== nextItem.label;
    });
  });
};

var valueChanged = function valueChanged(prevValue, nextValue) {
  if (prevValue.length !== nextValue.length) {
    return true;
  }
  return nextValue.some(function (nextValueItem, index) {
    var prevValueItem = prevValue[index];
    return nextValueItem !== prevValueItem;
  });
};

var Picker = function (_Component) {
  (0, _inherits3.default)(Picker, _Component);

  function Picker() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, Picker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Picker.__proto__ || (0, _getPrototypeOf2.default)(Picker)).call.apply(_ref, [this].concat(args))), _this), _this.lowerListEls = [], _this.upperListEls = [], _this.scrollHeights = [], _this.frameIds = [], _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(Picker, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setSelectedValues(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _props = this.props,
          prevData = _props.data,
          prevValue = _props.value;
      var data = nextProps.data,
          value = nextProps.value;
      // if data or selected values changed, should reset the selected values on UI interface

      if (dataChanged(prevData, data) || valueChanged(prevValue, value)) {
        this.setSelectedValues(nextProps);
      }
    }
  }, {
    key: 'setSelectedValues',
    value: function setSelectedValues(props) {
      var _this2 = this;

      var data = props.data,
          value = props.value,
          lineHeight = props.lineHeight;

      data.forEach(function (columnData, index) {
        var valueIndex = 0;
        columnData.some(function (item, itemIndex) {
          if (item.value === value[index]) {
            valueIndex = itemIndex;
            return true;
          }
        });

        var scrollHeight = valueIndex * lineHeight;
        cancelAnimationFrame(_this2.frameIds[index]);
        _this2.scrollTo(scrollHeight, index);
        _this2.scrollHeights[index] = scrollHeight;
      });
    }
  }, {
    key: 'renderLowerRow',
    value: function renderLowerRow(rowData, columnIndex) {
      var _props2 = this.props,
          unit = _props2.unit,
          lineHeight = _props2.lineHeight,
          labelStyle = _props2.labelStyle;

      var unitText = unit[columnIndex];
      return _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.value, { height: lineHeight, alignItems: unitText ? 'flex-end' : 'center' }]
        },
        _react2.default.createElement(
          _reactNative.Text,
          { style: [styles.label, labelStyle], numberOfLines: 1 },
          rowData.label
        )
      );
    }
  }, {
    key: 'renderColumnLowerLayer',
    value: function renderColumnLowerLayer(index) {
      var _this3 = this;

      var _props3 = this.props,
          data = _props3.data,
          unit = _props3.unit,
          lineHeight = _props3.lineHeight;

      var unitText = unit[index];
      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.lowerColumn },
        _react2.default.createElement(_ColumnView2.default, {
          style: styles.lowerList,
          ref: function ref(el) {
            return _this3.lowerListEls[index] = el;
          },
          lineHeight: lineHeight,
          data: data[index],
          renderRow: function renderRow(rowData) {
            return _this3.renderLowerRow(rowData, index);
          }
        }),
        unitText ? _react2.default.createElement(_reactNative.View, { style: styles.unitContainer }) : null
      );
    }
  }, {
    key: 'renderUpperRow',
    value: function renderUpperRow(rowData, columnIndex) {
      var _props4 = this.props,
          unit = _props4.unit,
          lineHeight = _props4.lineHeight,
          labelStyle = _props4.labelStyle,
          frontLabelStyle = _props4.frontLabelStyle;

      var unitText = unit[columnIndex];
      return _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.value, { height: lineHeight, alignItems: unitText ? 'flex-end' : 'center' }]
        },
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: [styles.label, labelStyle, { fontSize: 20 }, frontLabelStyle],
            numberOfLines: 1
          },
          rowData.label
        )
      );
    }
  }, {
    key: 'renderColumnUpperLayer',
    value: function renderColumnUpperLayer(index) {
      var _this4 = this;

      var _props5 = this.props,
          data = _props5.data,
          unit = _props5.unit,
          lineHeight = _props5.lineHeight,
          unitStyle = _props5.unitStyle;

      var unitText = unit[index];
      var bodyHeight = lineHeight * _constants2.BODY_HEIGHT_COEFFICIENT;
      var height = (bodyHeight - lineHeight) / 2;
      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.upperColumn },
        _react2.default.createElement(_Gradient2.default, { height: height }),
        _react2.default.createElement(_reactNative.View, { style: styles.border }),
        _react2.default.createElement(
          _reactNative.View,
          { style: [styles.upperCenter, { height: lineHeight }] },
          _react2.default.createElement(
            _reactNative.View,
            { style: styles.upperListContainer },
            _react2.default.createElement(_ColumnView2.default, {
              style: styles.upperList,
              ref: function ref(el) {
                return _this4.upperListEls[index] = el;
              },
              lineHeight: lineHeight,
              data: data[index],
              renderRow: function renderRow(rowData) {
                return _this4.renderUpperRow(rowData, index);
              }
            })
          ),
          unitText ? _react2.default.createElement(
            _reactNative.View,
            { style: styles.unitContainer },
            _react2.default.createElement(
              _reactNative.Text,
              { style: [styles.unit, unitStyle], numberOfLines: 1 },
              unitText
            )
          ) : null
        ),
        _react2.default.createElement(_reactNative.View, { style: styles.border }),
        _react2.default.createElement(_Gradient2.default, { height: height, reverse: true })
      );
    }
  }, {
    key: 'renderColumn',
    value: function renderColumn(index) {
      var _this5 = this;

      return _react2.default.createElement(
        _reactNative.View,
        { key: index, style: styles.column },
        this.renderColumnLowerLayer(index),
        this.renderColumnUpperLayer(index),
        _react2.default.createElement(_Gesture2.default, {
          style: styles.dragBody,
          onDragStart: function onDragStart(state) {
            return _this5.onDragStart(state, index);
          },
          onDrag: function onDrag(state) {
            return _this5.onDrag(state, index);
          },
          onDragEnd: function onDragEnd(state) {
            return _this5.onDragEnd(state, index);
          }
        })
      );
    }
  }, {
    key: 'onDragStart',
    value: function onDragStart(state, index) {
      cancelAnimationFrame(this.frameIds[index]);
      this.onDrag(state, index);
    }
  }, {
    key: 'onDrag',
    value: function onDrag(_ref2, index) {
      var dy = _ref2.dy,
          vy = _ref2.vy;
      var isDragEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var _props6 = this.props,
          data = _props6.data,
          lineHeight = _props6.lineHeight;

      var maxScrollHeight = (data[index].length - 1) * lineHeight;
      var scrollHeight = this.scrollHeights[index] - dy;

      // if out of boundary, three times slowly while draging
      if (scrollHeight < 0) {
        scrollHeight = scrollHeight / 3;
      } else if (scrollHeight > maxScrollHeight) {
        scrollHeight = (scrollHeight - maxScrollHeight) / 3 + maxScrollHeight;
      }

      this.scrollTo(scrollHeight, index);
      if (isDragEnd) {
        this.startBounceAnimate(scrollHeight, vy, index);
      }
    }
  }, {
    key: 'onDragEnd',
    value: function onDragEnd(state, index) {
      this.onDrag(state, index, true);
    }
  }, {
    key: 'startBounceAnimate',
    value: function startBounceAnimate(scrollHeight, v, index) {
      var _this6 = this;

      var _props7 = this.props,
          data = _props7.data,
          value = _props7.value,
          lineHeight = _props7.lineHeight,
          onChange = _props7.onChange;

      var maxRowIndex = data[index].length - 1;
      var maxScrollHeight = maxRowIndex * lineHeight;
      var targetRowIndex = void 0;
      var targetScrollHeight = void 0;

      if (scrollHeight < 0) {
        targetRowIndex = 0;
        targetScrollHeight = 0;
      } else if (scrollHeight > maxScrollHeight) {
        targetRowIndex = maxRowIndex;
        targetScrollHeight = maxScrollHeight;
      } else {
        var absV = Math.abs(v);
        targetRowIndex = Math.round(scrollHeight / lineHeight);
        if (absV >= _constants2.DRAG_EFFECTIVE_MINIMUM_VELOCITY) {
          targetRowIndex += (v > 0 ? -1 : 1) * Math.min(_constants2.BOUNCE_MAXIMUM_ITEM_AMOUNT, Math.round(absV / _constants2.DRAG_EFFECTIVE_MINIMUM_VELOCITY));
        }
        if (targetRowIndex < 0) {
          targetRowIndex = 0;
        } else if (targetRowIndex > maxRowIndex) {
          targetRowIndex = maxRowIndex;
        }
        targetScrollHeight = targetRowIndex * lineHeight;
      }

      var startTime = void 0;
      var onAnimate = function onAnimate(time) {
        if (startTime === undefined) {
          startTime = time;
        }
        var deltaTime = time - startTime;
        var animatedDone = false;
        if (deltaTime > _constants2.BOUNCE_DURATION) {
          deltaTime = _constants2.BOUNCE_DURATION;
          animatedDone = true;
        }
        _this6.scrollTo(deltaTime / _constants2.BOUNCE_DURATION * (targetScrollHeight - scrollHeight) + scrollHeight, index);
        if (animatedDone) {
          _this6.scrollHeights[index] = targetScrollHeight;
          onChange.apply(undefined, (0, _toConsumableArray3.default)(data.map(function (columnData, columnIndex) {
            if (columnIndex === index) {
              return columnData[targetRowIndex].value;
            } else {
              return value[columnIndex];
            }
          })));
        } else {
          _this6.frameIds[index] = requestAnimationFrame(onAnimate);
        }
      };
      this.frameIds[index] = requestAnimationFrame(onAnimate);
    }
  }, {
    key: 'scrollTo',
    value: function scrollTo(y, index) {
      var lowerListEl = this.lowerListEls[index];
      var upperListEl = this.upperListEls[index];
      var lineHeight = this.props.lineHeight;

      var bodyHeight = lineHeight * _constants2.BODY_HEIGHT_COEFFICIENT;
      if (lowerListEl) {
        lowerListEl.scrollTo(y - (bodyHeight - lineHeight) / 2);
      }
      if (upperListEl) {
        upperListEl.scrollTo(y);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this7 = this;

      var _props8 = this.props,
          style = _props8.style,
          data = _props8.data,
          lineHeight = _props8.lineHeight;

      var bodyHeight = lineHeight * _constants2.BODY_HEIGHT_COEFFICIENT;
      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.body, style] },
        _react2.default.createElement(
          _reactNative.View,
          { style: [styles.container, { height: bodyHeight }] },
          data.map(function (columnData, index) {
            return _this7.renderColumn(index);
          })
        )
      );
    }
  }]);
  return Picker;
}(_react.Component);

Picker.propTypes = {
  style: _reactNative.View.propTypes.style,
  data: _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.shape({
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired
  }))),
  value: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
  unit: _propTypes2.default.arrayOf(_propTypes2.default.string),
  lineHeight: _propTypes2.default.number, // picker item line height
  labelStyle: _reactNative.Text.propTypes.style, // label style
  frontLabelStyle: _reactNative.Text.propTypes.style, // additional label style when this item is at front
  unitStyle: _reactNative.Text.propTypes.style, // unit style
  onChange: _propTypes2.default.func
};
Picker.defaultProps = {
  data: [[]],
  value: [],
  unit: [],
  lineHeight: _constants2.ITEM_LINE_HEIGHT,
  onChange: _constants.noop
};
exports.default = Picker;


var styles = _reactNative.StyleSheet.create({
  body: {
    backgroundColor: _themes2.default['color.fill.general']
  },
  container: {
    flexDirection: 'row'
  },
  column: {
    position: 'relative',
    flex: 1,
    backgroundColor: _themes2.default['color.fill.general'],
    overflow: 'hidden'
  },
  lowerColumn: {
    flex: 1,
    flexDirection: 'row'
  },
  lowerList: {
    flex: 1,
    backgroundColor: _themes2.default['color.fill.general']
  },
  value: {
    backgroundColor: _themes2.default['color.fill.general'],
    justifyContent: 'center'
  },
  label: {
    fontSize: 16,
    color: '#333'
  },
  unitContainer: {
    flex: 1,
    marginLeft: 5,
    backgroundColor: _themes2.default['color.fill.general'],
    alignItems: 'flex-start',
    justifyContent: 'center'
  },
  upperColumn: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },
  border: {
    height: 1,
    backgroundColor: _themes2.default['picker.color.border']
  },
  upperCenter: {
    flexDirection: 'row'
  },
  upperListContainer: {
    flex: 1
  },
  upperList: {
    flex: 1,
    backgroundColor: _themes2.default['color.fill.general']
  },
  unit: {
    marginTop: 2,
    fontSize: 12,
    color: '#666'
  },
  dragBody: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
});