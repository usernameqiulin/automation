'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPanResponder;

var _reactNative = require('react-native');

var _constants = require('./constants');

function createPanResponder(_ref) {
  var _ref$onTouchStart = _ref.onTouchStart,
      onTouchStart = _ref$onTouchStart === undefined ? _constants.noop : _ref$onTouchStart,
      _ref$onTouchMove = _ref.onTouchMove,
      onTouchMove = _ref$onTouchMove === undefined ? _constants.noop : _ref$onTouchMove,
      _ref$onTouchEnd = _ref.onTouchEnd,
      onTouchEnd = _ref$onTouchEnd === undefined ? _constants.noop : _ref$onTouchEnd;

  var startLocationX = 0;
  var startLocationY = 0;

  // location XY not correct on android, do the fix
  function beforeTouchStart(evt, gestureState) {
    if (_reactNative.Platform.OS === 'android') {
      var nativeEvent = evt.nativeEvent;
      startLocationX = nativeEvent.locationX;
      startLocationY = nativeEvent.locationY;
    }
  }

  function beforeTouchMove(evt, gestureState) {
    if (_reactNative.Platform.OS === 'android') {
      var nativeEvent = evt.nativeEvent;
      var dx = gestureState.dx,
          dy = gestureState.dy;

      nativeEvent.locationX = startLocationX + dx;
      nativeEvent.locationY = startLocationY + dy;
    }
  }

  function beforeTouchEnd(evt, gestureState) {
    beforeTouchMove(evt, gestureState);
  }

  return _reactNative.PanResponder.create({
    onStartShouldSetPanResponder: _constants.positiveFn,
    onStartShouldSetPanResponderCapture: _constants.negativeFn,
    onMoveShouldSetPanResponder: _constants.negativeFn,
    onMoveShouldSetPanResponderCapture: _constants.negativeFn,
    onPanResponderTerminationRequest: _reactNative.Platform.OS === 'android' ? _constants.positiveFn : _constants.negativeFn,
    onShouldBlockNativeResponder: _reactNative.Platform.OS === 'android' ? _constants.negativeFn : _constants.positiveFn,
    onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {
      beforeTouchStart(evt, gestureState);
      onTouchStart(evt, gestureState);
    },
    onPanResponderMove: function onPanResponderMove(evt, gestureState) {
      beforeTouchMove(evt, gestureState);
      onTouchMove(evt, gestureState);
    },
    onPanResponderReject: function onPanResponderReject(evt, gestureState) {
      beforeTouchEnd(evt, gestureState);
      onTouchEnd(evt, gestureState, false); // trigger touch end, but not in natural way
    },
    onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
      beforeTouchEnd(evt, gestureState);
      onTouchEnd(evt, gestureState, true); // trigger touch end
    },
    onPanResponderTerminate: function onPanResponderTerminate(evt, gestureState) {
      beforeTouchEnd(evt, gestureState);
      onTouchEnd(evt, gestureState, false); // trigger touch end, but not in natural way
    }
  });
}