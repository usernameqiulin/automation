"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createEventEmitter;
function createEventEmitter() {
  var listenersMap = {};

  // deduplicate listener
  function addListener(evtName, listener) {
    var listeners = void 0;
    if (!listenersMap.hasOwnProperty(evtName)) {
      listeners = listenersMap[evtName] = [];
    } else {
      listeners = listenersMap[evtName];
    }

    if (listeners.indexOf(listener) === -1) {
      listeners.push(listener);
    }
  }

  // remove listener, use undefined to replace
  // in case of thus condition: remove listener on emit
  function removeListener(evtName, listener) {
    if (!listenersMap.hasOwnProperty(evtName)) {
      return;
    }

    var listeners = listenersMap[evtName];
    var index = listeners.indexOf(listener);
    if (index !== -1) {
      listeners.splice(index, 1, undefined);
    }
  }

  function emit(evtName) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!listenersMap.hasOwnProperty(evtName)) {
      return;
    }

    var listeners = listenersMap[evtName];
    listeners.forEach(function (listener) {
      if (listener !== undefined) {
        listener.apply(undefined, args);
      }
    });

    // remove redundant undefined listeners after emit
    var index = void 0;
    while ((index = listeners.indexOf(undefined)) !== -1) {
      listeners.splice(index, 1);
    }
  }

  return {
    addListener: addListener,
    removeListener: removeListener,
    emit: emit,
    on: addListener
  };
}