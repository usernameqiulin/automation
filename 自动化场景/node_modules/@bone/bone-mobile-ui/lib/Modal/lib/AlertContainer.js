'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _Container2 = require('./Container');

var _Container3 = _interopRequireDefault(_Container2);

var _TouchableOpacity = require('../../TouchableOpacity');

var _TouchableOpacity2 = _interopRequireDefault(_TouchableOpacity);

var _themes = require('../../style/themes');

var _themes2 = _interopRequireDefault(_themes);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AlertContainer = function (_Container) {
  (0, _inherits3.default)(AlertContainer, _Container);

  function AlertContainer() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, AlertContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AlertContainer.__proto__ || (0, _getPrototypeOf2.default)(AlertContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      visible: false,
      opacity: new _reactNative.Animated.Value(1),
      backgroundOpacity: new _reactNative.Animated.Value(0),
      scale: new _reactNative.Animated.Value(0)
    }, _this.onAfterOpen = function () {
      var _this$state = _this.state,
          opacity = _this$state.opacity,
          backgroundOpacity = _this$state.backgroundOpacity,
          scale = _this$state.scale;

      opacity.setValue(1);
      backgroundOpacity.setValue(1);
      scale.setValue(1);
    }, _this.onAfterClose = function () {
      var onAfterClose = _this.props.onAfterClose;
      var _this$state2 = _this.state,
          opacity = _this$state2.opacity,
          backgroundOpacity = _this$state2.backgroundOpacity,
          scale = _this$state2.scale;

      _this.setState({ visible: false });
      opacity.setValue(1);
      backgroundOpacity.setValue(0);
      scale.setValue(0);
      onAfterClose();
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(AlertContainer, [{
    key: 'stopAnimate',
    value: function stopAnimate() {
      var _state = this.state,
          opacity = _state.opacity,
          backgroundOpacity = _state.backgroundOpacity,
          scale = _state.scale;

      opacity.stopAnimation();
      backgroundOpacity.stopAnimation();
      scale.stopAnimation();
    }

    // redefine open

  }, {
    key: 'open',
    value: function open() {
      var _state2 = this.state,
          backgroundOpacity = _state2.backgroundOpacity,
          scale = _state2.scale;

      this.stopAnimate();
      this.setState({ visible: true });
      _reactNative.Animated.parallel([_reactNative.Animated.timing(backgroundOpacity, { duration: _constants.ALERT_ANIMATION_DURATION, toValue: 1, easing: _reactNative.Easing.linear }), _reactNative.Animated.timing(scale, { duration: _constants.ALERT_ANIMATION_DURATION, toValue: 1, easing: _reactNative.Easing.linear })]).start(this.onAfterOpen);
    }

    // redefine close

  }, {
    key: 'close',
    value: function close() {
      var opacity = this.state.opacity;

      this.stopAnimate();
      _reactNative.Animated.timing(opacity, {
        duration: _constants.ALERT_ANIMATION_DURATION,
        toValue: 0,
        easing: _reactNative.Easing.linear
      }).start(this.onAfterClose);
    }
  }, {
    key: 'render',


    // redefine render
    value: function render() {
      var _props = this.props,
          onOverlayPress = _props.onOverlayPress,
          transparent = _props.transparent,
          children = _props.children;
      var _state3 = this.state,
          visible = _state3.visible,
          opacity = _state3.opacity,
          backgroundOpacity = _state3.backgroundOpacity,
          scale = _state3.scale;

      return visible ? _react2.default.createElement(
        _reactNative.KeyboardAvoidingView,
        { style: styles.body, behavior: 'padding' },
        _react2.default.createElement(
          _reactNative.Animated.View,
          { style: [styles.container, { opacity: opacity }] },
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: [styles.background, {
                backgroundColor: transparent ? 'transparent' : _themes2.default['color.overlay.modal'],
                opacity: backgroundOpacity
              }]
            },
            _react2.default.createElement(_TouchableOpacity2.default, { style: styles.backgroundTouch, activeOpacity: 1, onPress: onOverlayPress })
          ),
          _react2.default.createElement(
            _reactNative.Animated.View,
            {
              style: {
                transform: [{
                  scale: scale.interpolate({
                    inputRange: [0, 1],
                    outputRange: [1.05, 1]
                  })
                }]
              }
            },
            children
          )
        )
      ) : null;
    }
  }]);
  return AlertContainer;
}(_Container3.default);

exports.default = AlertContainer;


var styles = _reactNative.StyleSheet.create({
  body: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    backgroundColor: 'transparent'
  },
  container: {
    position: 'relative',
    flex: 1,
    backgroundColor: 'transparent',
    overflow: 'hidden',
    alignItems: 'center',
    justifyContent: 'center'
  },
  background: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  },
  backgroundTouch: {
    flex: 1
  }
});