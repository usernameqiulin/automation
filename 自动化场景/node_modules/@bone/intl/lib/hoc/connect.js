'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = connectIntl;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _util = require('../util');

var _core = require('../core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function connectIntl(WrappedComponent) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$intlPropName = options.intlPropName,
      intlPropName = _options$intlPropName === undefined ? 'intl' : _options$intlPropName,
      _options$ref = options.ref,
      ref = _options$ref === undefined ? _util.noop : _options$ref;

  var ConnectIntl = function (_Component) {
    _inherits(ConnectIntl, _Component);

    function ConnectIntl(props, context) {
      _classCallCheck(this, ConnectIntl);

      var _this = _possibleConstructorReturn(this, (ConnectIntl.__proto__ || Object.getPrototypeOf(ConnectIntl)).call(this, props, context));

      _this.mounted = false;
      _this.shouldUpdateOnMount = false;
      var _context$intl = context.intl,
          getMessage = _context$intl.getMessage,
          subscribe = _context$intl.subscribe,
          dispatch = _context$intl.dispatch;


      _this.state = {
        switchLocale: function switchLocale(locale) {
          dispatch({ locale: locale });
        },

        formatMessage: _util.formatMessage.bind(null, getMessage())
      };

      // whenever locale or messages changed, make sure the WrappedComponent will receive newest data
      _this.unsubscribe = subscribe(function () {
        if (_this.mounted) {
          _this.setState({
            formatMessage: _util.formatMessage.bind(null, getMessage())
          });
        } else {
          _this.state.formatMessage = _util.formatMessage.bind(null, getMessage());
          _this.shouldUpdateOnMount = true;
        }
      });
      return _this;
    }

    _createClass(ConnectIntl, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.mounted = true;
        if (this.shouldUpdateOnMount) {
          this.forceUpdate();
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unsubscribe();
      }
    }, {
      key: 'render',
      value: function render() {
        var _state = this.state,
            switchLocale = _state.switchLocale,
            formatMessage = _state.formatMessage;

        var extendProps = _defineProperty({}, intlPropName, { switchLocale: switchLocale, formatMessage: formatMessage });
        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, extendProps, {
          ref: ref
        }));
      }
    }]);

    return ConnectIntl;
  }(_react.Component);

  ConnectIntl.displayName = (0, _util.getDisplayName)(WrappedComponent);
  ConnectIntl.contextTypes = {
    intl: _core.intlShape
  };
  ConnectIntl.WrappedComponent = WrappedComponent;


  return ConnectIntl;
}