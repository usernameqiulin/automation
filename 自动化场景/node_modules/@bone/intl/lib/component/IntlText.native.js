'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _hoc = require('../hoc');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  id: _propTypes2.default.string.isRequired,
  values: _propTypes2.default.object,
  defaultMessage: _propTypes2.default.string
};

var defaultProps = {
  values: {},
  defaultMessage: ''
};

var WrappedText = function (_Component) {
  _inherits(WrappedText, _Component);

  function WrappedText() {
    _classCallCheck(this, WrappedText);

    return _possibleConstructorReturn(this, (WrappedText.__proto__ || Object.getPrototypeOf(WrappedText)).apply(this, arguments));
  }

  _createClass(WrappedText, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          intl = _props.intl,
          id = _props.id,
          values = _props.values,
          defaultMessage = _props.defaultMessage;

      return _react2.default.createElement(
        _reactNative.Text,
        this.props,
        intl.formatMessage(id, values, { defaultMessage: defaultMessage })
      );
    }
  }]);

  return WrappedText;
}(_react.Component);

WrappedText.propTypes = propTypes;
WrappedText.defaultProps = defaultProps;


var ConnectedText = (0, _hoc.connectIntl)(WrappedText);

var IntlText = function (_Component2) {
  _inherits(IntlText, _Component2);

  function IntlText() {
    _classCallCheck(this, IntlText);

    return _possibleConstructorReturn(this, (IntlText.__proto__ || Object.getPrototypeOf(IntlText)).apply(this, arguments));
  }

  _createClass(IntlText, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(ConnectedText, this.props);
    }
  }]);

  return IntlText;
}(_react.Component);

IntlText.propTypes = propTypes;
IntlText.defaultProps = defaultProps;
exports.default = IntlText;