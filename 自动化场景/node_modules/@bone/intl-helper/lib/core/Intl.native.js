'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _reactNative = require('react-native');

var _sdkBase = require('@bone/sdk-base');

var _BaseIntl2 = require('./BaseIntl');

var _BaseIntl3 = _interopRequireDefault(_BaseIntl2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Intl = function (_BaseIntl) {
  (0, _inherits3.default)(Intl, _BaseIntl);

  function Intl() {
    (0, _classCallCheck3.default)(this, Intl);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Intl.__proto__ || (0, _getPrototypeOf2.default)(Intl)).call(this));

    _this.currentConfig = {
      uri: '',
      apiVersion: '1.0.0',
      appName: '',
      locale: '',
      localMessages: {}
    };
    _this.requestTimes = 0;
    return _this;
  }

  (0, _createClass3.default)(Intl, [{
    key: 'getUri',


    // get default uri if not defined
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var uri, conf;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                uri = this.currentConfig.uri;

                if (!uri) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt('return', uri);

              case 3:
                _context.prev = 3;
                _context.next = 6;
                return _sdkBase.config.fetch();

              case 6:
                conf = _context.sent;

                if (!(conf.serverEnv === 'test' || conf.serverEnv === 'production')) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt('return', this.currentConfig.uri = 'https://sys-api.link.aliyun.com/i18n/get');

              case 11:
                return _context.abrupt('return', this.currentConfig.uri = 'http://system.service.daily.aliplus.com/i18n/get');

              case 12:
                _context.next = 17;
                break;

              case 14:
                _context.prev = 14;
                _context.t0 = _context['catch'](3);
                return _context.abrupt('return', this.currentConfig.uri = '');

              case 17:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 14]]);
      }));

      function getUri() {
        return _ref.apply(this, arguments);
      }

      return getUri;
    }()
  }, {
    key: 'request',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var uri, _currentConfig, apiVersion, appName, locale, localMessages, key, requestTimes, lastData, params, data;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getUri();

              case 2:
                uri = _context2.sent;
                _currentConfig = this.currentConfig, apiVersion = _currentConfig.apiVersion, appName = _currentConfig.appName, locale = _currentConfig.locale, localMessages = _currentConfig.localMessages;
                key = 'bone-intl-' + appName + '-' + locale;
                requestTimes = ++this.requestTimes;

                // get last data from local storage

                lastData = void 0;
                _context2.prev = 7;
                _context2.t0 = JSON;
                _context2.next = 11;
                return _reactNative.AsyncStorage.getItem(key);

              case 11:
                _context2.t1 = _context2.sent;
                lastData = _context2.t0.parse.call(_context2.t0, _context2.t1);
                _context2.next = 18;
                break;

              case 15:
                _context2.prev = 15;
                _context2.t2 = _context2['catch'](7);

                lastData = null;

              case 18:
                if (!(requestTimes < this.requestTimes)) {
                  _context2.next = 20;
                  break;
                }

                return _context2.abrupt('return');

              case 20:
                params = { appName: appName, language: locale };

                if (lastData) {
                  // if local storage exits, emit first render
                  this.dispatch(locale, lastData.data);
                  // and add version to params to do the comparison at server side
                  params.version = lastData.version;
                } else {
                  // local storage not exits, read from local messages
                  if (locale in localMessages) {
                    this.dispatch(locale, localMessages[locale]);
                  }
                }

                // request newest data
                data = void 0;
                _context2.prev = 23;
                _context2.next = 26;
                return _sdkBase.APIGateway.request(uri, { data: params, version: apiVersion });

              case 26:
                data = _context2.sent;

                data = data.data;
                _context2.next = 35;
                break;

              case 30:
                _context2.prev = 30;
                _context2.t3 = _context2['catch'](23);

                if (!(_context2.t3.code == 304)) {
                  _context2.next = 34;
                  break;
                }

                return _context2.abrupt('return');

              case 34:
                return _context2.abrupt('return');

              case 35:
                if (!(requestTimes < this.requestTimes)) {
                  _context2.next = 37;
                  break;
                }

                return _context2.abrupt('return');

              case 37:

                // got newest data, emit second render
                this.dispatch(locale, data.data);

                // got newest data, reset the local storage
                _context2.prev = 38;
                _context2.next = 41;
                return _reactNative.AsyncStorage.setItem(key, (0, _stringify2.default)(data));

              case 41:
                _context2.next = 45;
                break;

              case 43:
                _context2.prev = 43;
                _context2.t4 = _context2['catch'](38);

              case 45:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[7, 15], [23, 30], [38, 43]]);
      }));

      function request() {
        return _ref2.apply(this, arguments);
      }

      return request;
    }()
  }, {
    key: 'config',
    set: function set() {
      var nextConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.currentConfig = (0, _extends3.default)({}, this.currentConfig, nextConfig);
      this.request();
    }
  }]);
  return Intl;
}(_BaseIntl3.default);

exports.default = Intl;